% ---------------------------------------------------------------------------------------
% This script computes the positions on all the epochs from the data in the 
% .mat files that can be obtained with 'readRinex.m'. The  number of epochs
% can be specified with 'nEpoch_max'.
% 
% To select the input data file: change 'dataFileName'
% ---------------------------------------------------------------------------------------
%% HEADER
close all;
clc; clearvars;
addpath(genpath('Library'));
set(groot,'defaultLineLineWidth',0.8)
% plotObsData;
%% CONSTANTS
global nSats;
nSats               =   32;         % Total number of satellites  
mkSize              =   12;         % Marker size for plots
mColors             =   jet(nSats); % Create set of different colors for plotting. 1 sat - 1 color. 

%% CONFIG PARAMS
removeSats          =  [23 27 28 10];
global weightType;          % Valid values: 1 to 5. See getWeight for more details
weightType      =   1;

%% FILE LOADING
dataFileName        =   'Data/Structs/static.mat';
isStatic            =   true;     % << Change this according to type of measurements
load(dataFileName);

%% DATA EXTRACTION
% Extraction of data into matrices
nEpoch_max = length(ObsData.DATA); % For all epochs -> length(ObsData.DATA)
[mEpoch, nEpoch, vNumSat, ~, mTracked, mC1, mL1, mD1, mS1] = ...
    ExtractData_O(ObsData.DATA, nEpoch_max);

[ionoA, ionoB, mEphem] = ExtractData_N(NavData.HEADER, NavData.DATA);
iono        =   [ionoA, ionoB];

RefPos      =   ObsData.HEADER.ANTENNA.POSITION;
% refPosXYZ   =   [RefPos.x_ECEF, RefPos.y_ECEF, RefPos.z_ECEF];
% refPosLLH   =   xyz2llhDeg(refPosXYZ); 
% For measurements at football field
refPosXYZ   =   [4627625, 119930, 4373207];
refPosLLH   =   [43.563448, 1.484557, 195];
refPosNEU   =   delta_wgs84_2_local(refPosXYZ.', refPosXYZ.').';
pvt0        =   [refPosXYZ, 0];     % Initial guess

%% Data structures initialisation
mPosXYZ     =   zeros(nEpoch, 3);
mPosLLH     =   zeros(nEpoch, 3);
tBias       =   zeros(nEpoch, 1);
timeCorr    =   zeros(nSats, nEpoch);
ionoCorr    =   zeros(nSats, nEpoch);
tropCorr    =   zeros(nSats, nEpoch);
mElev       =   zeros(nEpoch, nSats);
mAzim       =   zeros(nEpoch, nSats);
mDOP        =   zeros(nEpoch, 4);

%% EPOCH LOOP
for iEpoch = 1:nEpoch
        % Find the PRNs of the tracked satellites at current epoch
        trackedPRN  =   find(mTracked(iEpoch, :));
        trackedPRN  =   setdiff(trackedPRN, removeSats);

        % Rx time in seconds of week
        epochTime   =   mEpoch(iEpoch, 2);
        epochDoY    =   ymd2doy(mEpoch(iEpoch, 4:9).');

        trackedPRN  =   checkSatHealth(trackedPRN, mEphem, epochTime);
    if vNumSat(iEpoch) >= 4
        [pvt, timeCorr(:, iEpoch), ionoCorr(:, iEpoch), tropCorr(:, iEpoch), mSatPos, mDOP(iEpoch, :)] = ...
            estimatePVT(trackedPRN, mC1(iEpoch, :), mEphem, epochTime, epochDoY, pvt0, iono, mS1(iEpoch, :));
        pvt0 = pvt;
    else
        pvt                    =   nan(1, 4);
        ionoCorr(:, iEpoch)    =   nan(32, 1);
        tropCorr(:, iEpoch)    =   nan(32, 1);
    end
    for svPRN = trackedPRN
        [elevRad, azimRad]   =  elevation_azimuth(refPosXYZ, mSatPos(svPRN, :));
        mElev(iEpoch, svPRN) =  rad2deg(elevRad);
        mAzim(iEpoch, svPRN) =  rad2deg(azimRad);
    end
    mPosXYZ(iEpoch, :)  =   pvt(1:3);
    mPosLLH(iEpoch, :)  =   xyz2llhDeg(mPosXYZ(iEpoch, :));
    tBias(iEpoch)       =   pvt(4);
end

%% COORDINATES CONVERSION
mPosNEU = delta_wgs84_2_local(mPosXYZ.', refPosXYZ.').';

%% PREFORMANCE METRICS
neuError    =   mPosNEU - refPosNEU;
hDOP        =   sqrt(mDOP(:, 1).^2 + mDOP(:, 2).^2);
vDOP        =   mDOP(:,3);   
pDOP        =   sqrt(mDOP(:, 1).^2 + mDOP(:, 2).^2 + mDOP(:, 3).^2);
tDOP        =   mDOP(:, 4);
gDOP        =   sqrt(mDOP(:, 1).^2 + mDOP(:, 2).^2 + mDOP(:, 3).^2 + mDOP(:, 4).^2);

%% RESULT ANALYSIS
timeAxis = 1:nEpoch;

% Number of tracked satellites over time
figure;
plot(timeAxis, hDOP); hold on;
plot(timeAxis, vDOP);
xlabel('Epoch'); ylabel('DOP');
legend({'HDOP', 'VDOP'}, 'Location', 'best');

% Elevation of satellites in view
mElevAny  =   mElev(:, any(mElev));   % Keeping columns of satellites from which there's C1
[~, col]  =   find(mElev);          
satsElev  =   unique(col);          % Finding ids of the satellites from which there's S1
mElevAny(mElevAny==0) = nan;        % Changing values 0 for NaN so these aren't plotted
figure;
for sat = 1:length(satsElev)
    plot(timeAxis, mElevAny(:, sat).', '.',  'MarkerSize', mkSize,'color', mColors(satsElev(sat), :)); 
    hold on
end
hold off
legend(cellstr(num2str(satsElev)),'Location','bestoutside');
% title('Evolution of satellites elevations over time');
xlabel('Epoch'); ylabel('Elevation [ยบ]');

% Azimuth of satellites in view
mAzimAny  =   mAzim(:, any(mAzim));   % Keeping columns of satellites from which there's C1
[~, col]  =   find(mAzim);          
satsAzim  =   unique(col);          % Finding ids of the satellites from which there's S1
mAzimAny(mAzimAny==0) = nan;        % Changing values 0 for NaN so these aren't plotted
figure;
for sat = 1:length(satsAzim)
    plot(timeAxis, mAzimAny(:, sat).', '.',  'MarkerSize', mkSize,'color', mColors(satsAzim(sat), :)); 
    hold on
end
hold off
legend(cellstr(num2str(satsAzim)),'Location','bestoutside');
% title('Evolution of satellites azimuth over time');
xlabel('Epoch'); ylabel('Azimuth [ยบ]');

% NEU Error
% figure;
% grid on,
% plot(neuError(:, 2), neuError(:, 1), 'x', 'MarkerSize',9); hold on;
% plot(0, 0, 'x', 'Color', 'r', 'MarkerSize',9);
% xlabel('Longitude [m]'); ylabel('Latitude [m]');
% legend('estimated', 'reference', 'Location','best');

% NEU positions on maps
figure;
plot(mPosLLH(:,2), mPosLLH(:,1), '.b','MarkerSize',15); hold on;
plot(refPosLLH(2), refPosLLH(1), '.r','MarkerSize',15);
plot_google_map('MapScale', 1);
xlabel('East [ยบ]'); ylabel('North [ยบ]');

if isStatic % Plots only useful for static measurements
    % NEU Error over time
    figure;
    plot(timeAxis, neuError(:, 1), '.-'); hold on;
    plot(timeAxis, neuError(:, 2), '.-'); hold on;
    plot(timeAxis, neuError(:, 3), '.-');
%     title('NEU error over time');
    xlabel('Epoch'); ylabel('Error [m]');
    legend('North', 'East', 'Up');
    
    % CDF Lat - Long
    figure;
    ecdf(abs(neuError(:, 1))); hold on;
    ecdf(abs(neuError(:, 2)));
%     title('CDF of error in Latitude and Longitude');
    legend('Latitude', 'Longitude');
    xlabel('Coordinate error [m]');

    % CDF Height
    figure;
    ecdf(abs(neuError(:, 3))); hold on;
%     title('CDF of error in Height');
    xlabel('Height error [m]');
end




